{
  "version": 3,
  "sources": ["../../src/headers.ts"],
  "sourcesContent": ["/**\r\n * Headers class offers convenient helpers\r\n */\r\nimport { sanitizeName, sanitizeValue } from \"./common.js\";\r\n\r\nexport type HeadersInit = Headers | string[][] | { [key: string]: string };\r\n\r\nconst INTERNAL = Symbol(\"internal\");\r\n\r\n/**\r\n * Headers class\r\n *\r\n * @param {Object} init Response headers\r\n */\r\nexport default class Headers {\r\n  list: Record<string, string[]>;\r\n\r\n  constructor(init?: HeadersInit) {\r\n    this.list = Object.create(null);\r\n\r\n    if (!init) {\r\n      // No initialization needed\r\n    } else if (init instanceof Headers) {\r\n      // Copy headers from existing Headers instance\r\n      for (const [name, value] of init) {\r\n        this.append(name, value);\r\n      }\r\n    } else if (typeof init === \"object\" && Symbol.iterator in init) {\r\n      // Initialize from iterable of header pairs\r\n      for (const pair of init as Iterable<[string, string]>) {\r\n        if (!Array.isArray(pair) || pair.length !== 2) {\r\n          throw new TypeError(\"Each header pair must be a name/value tuple\");\r\n        }\r\n        this.append(pair[0], pair[1]);\r\n      }\r\n    } else if (typeof init === \"object\") {\r\n      // Initialize from object\r\n      for (const [name, value] of Object.entries(init)) {\r\n        this.append(name, value);\r\n      }\r\n    } else {\r\n      throw new TypeError(\"Provided initializer must be an object\");\r\n    }\r\n\r\n    Object.defineProperty(this, Symbol.toStringTag, {\r\n      value: \"Headers\",\r\n      writable: false,\r\n      enumerable: false,\r\n      configurable: true,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return first header value given name\r\n   *\r\n   * @param {string} name Header name\r\n   * @return {string}\r\n   */\r\n  public get(name: string): string | null {\r\n    const list = this.list[sanitizeName(name)];\r\n    if (!list) {\r\n      return null;\r\n    }\r\n\r\n    return list.join(\",\");\r\n  }\r\n\r\n  /**\r\n   * Iterate over all headers\r\n   *\r\n   * @param {function} callback Executed for each item with parameters (value, name, thisArg)\r\n   * @param {boolean} thisArg `this` context for callback function\r\n   */\r\n  public forEach(\r\n    callback: (value: string, name: string, headers: Headers) => void,\r\n    thisArg: any = undefined\r\n  ): void {\r\n    let pairs = getHeaderPairs(this);\r\n    let i = 0;\r\n    while (i < pairs.length) {\r\n      const pair = pairs[i];\r\n      if (!pair) {\r\n        continue;\r\n      }\r\n      const [name, value] = pair;\r\n      callback.call(thisArg, value, name, this);\r\n      pairs = getHeaderPairs(this);\r\n      i++;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Overwrite header values given name\r\n   *\r\n   * @param {string} name Header name\r\n   * @param {string|Array.<string|*>|*} value Header value\r\n   */\r\n  public set(name: string, value: string) {\r\n    this.list[sanitizeName(name)] = [sanitizeValue(value as string)];\r\n  }\r\n\r\n  /**\r\n   * Append a value onto existing header\r\n   *\r\n   * @param {string} name Header name\r\n   * @param {string|Array.<string|*>|*} value Header value\r\n   */\r\n  public append(name: string, value: string) {\r\n    if (!this.has(name)) {\r\n      this.set(name, value);\r\n      return;\r\n    }\r\n\r\n    this.list[sanitizeName(name)]?.push(sanitizeValue(value));\r\n  }\r\n\r\n  /**\r\n   * Check for header name existence\r\n   *\r\n   * @param {string} name Header name\r\n   * @return {boolean}\r\n   */\r\n  public has(name: string) {\r\n    return !!this.list[sanitizeName(name)];\r\n  }\r\n\r\n  /**\r\n   * Delete all header values given name\r\n   *\r\n   * @param {string} name Header name\r\n   */\r\n  public delete(name: string) {\r\n    delete this.list[sanitizeName(name)];\r\n  }\r\n\r\n  /**\r\n   * Return raw headers (non-spec api)\r\n   *\r\n   * @return {Object}\r\n   */\r\n  public raw() {\r\n    return this.list;\r\n  }\r\n\r\n  /**\r\n   * Get an iterator on keys.\r\n   *\r\n   * @return {Iterator}\r\n   */\r\n  public keys(): IterableIterator<string> {\r\n    return createHeadersIterator(this, \"key\");\r\n  }\r\n\r\n  /**\r\n   * Get an iterator on values.\r\n   *\r\n   * @return {Iterator}\r\n   */\r\n  public values(): IterableIterator<string> {\r\n    return createHeadersIterator(this, \"value\");\r\n  }\r\n\r\n  /**\r\n   * Get an iterator on entries.\r\n   *\r\n   * This is the default iterator of the Headers object.\r\n   *\r\n   * @return {Iterator}\r\n   */\r\n  public [Symbol.iterator](): IterableIterator<[string, string]> {\r\n    return createHeadersIterator(this, \"key+value\");\r\n  }\r\n\r\n  public entries(): IterableIterator<[string, string]> {\r\n    return this[Symbol.iterator]();\r\n  }\r\n\r\n  public getSetCookie(): string[] {\r\n    const cookies = this.get(\"Set-Cookie\");\r\n    return cookies ? cookies.split(/,\\s*/) : [];\r\n  }\r\n}\r\n\r\nfunction getHeaderPairs(headers: Headers, kind?: string) {\r\n  if (kind === \"key\")\r\n    return Object.keys(headers.raw())\r\n      .sort()\r\n      .map((k) => [k]);\r\n  const pairs = [];\r\n  for (const key of Object.keys(headers.raw()).sort()) {\r\n    for (const value of headers.list[key] || \"\") {\r\n      pairs.push([key, value]);\r\n    }\r\n  }\r\n  return pairs;\r\n}\r\n\r\nfunction createHeadersIterator(target: Headers, kind: string) {\r\n  const iterator = Object.create(HeadersIteratorPrototype);\r\n  iterator[INTERNAL] = {\r\n    target,\r\n    kind,\r\n    index: 0,\r\n  };\r\n  return iterator;\r\n}\r\n\r\nconst HeadersIteratorPrototype = Object.setPrototypeOf(\r\n  {\r\n    next() {\r\n      if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {\r\n        throw new TypeError(\"Value of `this` is not a HeadersIterator\");\r\n      }\r\n\r\n      const { target, kind, index } = this[INTERNAL];\r\n      const values = getHeaderPairs(target, kind);\r\n      const len = values.length;\r\n      if (index >= len) {\r\n        return {\r\n          value: undefined,\r\n          done: true,\r\n        };\r\n      }\r\n\r\n      const pair = values[index] || [];\r\n      this[INTERNAL].index = index + 1;\r\n\r\n      let result;\r\n      if (kind === \"key\") {\r\n        result = pair[0];\r\n      } else if (kind === \"value\") {\r\n        result = pair[1];\r\n      } else {\r\n        result = pair;\r\n      }\r\n\r\n      return {\r\n        value: result,\r\n        done: false,\r\n      };\r\n    },\r\n  },\r\n  Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()))\r\n);\r\n\r\nObject.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {\r\n  value: \"HeadersIterator\",\r\n  writable: false,\r\n  enumerable: false,\r\n  configurable: true,\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
