{
  "version": 3,
  "sources": ["../../src/fetch-error.ts"],
  "sourcesContent": ["import { FetchErrorType, NetErrorType, netErrorMap } from \"./types.js\";\r\n\r\nexport default class FetchError extends Error {\r\n  message: string;\r\n  type: FetchErrorType;\r\n  code?: string;\r\n  errno?: string;\r\n\r\n  constructor(\r\n    message: string,\r\n    type: FetchErrorType,\r\n    systemError?: { code: string }\r\n  ) {\r\n    super(message);\r\n\r\n    const regex = /^.*net::(.*)/;\r\n    if (regex.test(message)) {\r\n      let errorCode: NetErrorType =\r\n        (regex.exec(message)?.[1] as NetErrorType) || netErrorMap.ERR_UNKNOW;\r\n\r\n      if (Object.prototype.hasOwnProperty.call(netErrorMap, errorCode))\r\n        errorCode = netErrorMap[errorCode] as NetErrorType;\r\n      systemError = { code: errorCode };\r\n    }\r\n    this.message = message;\r\n    this.type = type;\r\n\r\n    // when err.type is `system`, err.code contains system error code\r\n    if (systemError) {\r\n      this.code = this.errno = systemError.code;\r\n    }\r\n\r\n    // hide custom error implementation details from end-users\r\n    Error.captureStackTrace(this, this.constructor);\r\n  }\r\n}\r\n"],
  "mappings": "AAAA,SAAuC,mBAAmB;AAE1D,MAAO,mBAAiC,MAAM;AAAA,EAC5C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEA,YACE,SACA,MACA,aACA;AACA,UAAM,OAAO;AAEb,UAAM,QAAQ;AACd,QAAI,MAAM,KAAK,OAAO,GAAG;AACvB,UAAI,YACD,MAAM,KAAK,OAAO,IAAI,CAAC,KAAsB,YAAY;AAE5D,UAAI,OAAO,UAAU,eAAe,KAAK,aAAa,SAAS;AAC7D,oBAAY,YAAY,SAAS;AACnC,oBAAc,EAAE,MAAM,UAAU;AAAA,IAClC;AACA,SAAK,UAAU;AACf,SAAK,OAAO;AAGZ,QAAI,aAAa;AACf,WAAK,OAAO,KAAK,QAAQ,YAAY;AAAA,IACvC;AAGA,UAAM,kBAAkB,MAAM,KAAK,WAAW;AAAA,EAChD;AACF;",
  "names": []
}
