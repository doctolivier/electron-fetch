{
  "version": 3,
  "sources": ["../../src/body.ts"],
  "sourcesContent": ["import Stream from \"node:stream\";\r\n\r\nimport { BodyInit, FetchErrorType, RequestInit } from \"./types.js\";\r\nimport { convert } from \"./common.js\";\r\nimport Blob from \"./blob.js\";\r\nimport FetchError from \"./fetch-error.js\";\r\n\r\nexport default class Body {\r\n  public body: BodyInit;\r\n  protected disturbed: boolean;\r\n  public size: number;\r\n  public timeout: number;\r\n  public headers: Headers | undefined;\r\n  private _url: string;\r\n  protected get url(): string {\r\n    return this._url;\r\n  }\r\n  protected set url(value: string) {\r\n    this._url = value;\r\n  }\r\n\r\n  constructor(\r\n    body: BodyInit | null | undefined,\r\n    init: RequestInit | ResponseInit = {}\r\n  ) {\r\n    if (body == null || body === undefined) {\r\n      // body is undefined or null\r\n      body = null;\r\n    } else if (typeof body === \"string\") {\r\n      // body is string\r\n    } else if (body instanceof Blob) {\r\n      // body is blob\r\n    } else if (Buffer.isBuffer(body)) {\r\n      // body is buffer\r\n    } else if (body instanceof Stream) {\r\n      // body is stream\r\n    } else {\r\n      // none of the above\r\n      // coerce to string\r\n      body = String(body);\r\n    }\r\n    this.body = body;\r\n    this.disturbed = false;\r\n    this.size = (init as RequestInit).size || 0;\r\n    this.timeout = (init as RequestInit).timeout || 0;\r\n  }\r\n\r\n  public get bodyUsed() {\r\n    return this.disturbed;\r\n  }\r\n\r\n  /**\r\n   * Decode response as ArrayBuffer\r\n   *\r\n   * @return {Promise}\r\n   */\r\n  public arrayBuffer(): Promise<ArrayBuffer> {\r\n    return this.consumeBody().then(\r\n      (buf: Buffer) =>\r\n        buf.buffer.slice(\r\n          buf.byteOffset,\r\n          buf.byteOffset + buf.byteLength\r\n        ) as ArrayBuffer\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return raw response as Blob\r\n   *\r\n   * @return {Promise}\r\n   */\r\n  public blob(): Promise<Blob> {\r\n    const ct = (this.headers && this.headers.get(\"content-type\")) || \"\";\r\n    return this.consumeBody().then((buf: Buffer) =>\r\n      Object.assign(\r\n        // Prevent copying\r\n        new Blob([], {\r\n          type: ct.toLowerCase(),\r\n        }),\r\n        {\r\n          buffer: buf,\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Decode response as json\r\n   *\r\n   * @return {Promise}\r\n   */\r\n  public json<T = any>(): Promise<T> {\r\n    return this.consumeBody().then((buffer: Buffer) =>\r\n      JSON.parse(buffer.toString())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Decode response as text\r\n   *\r\n   * @return {Promise}\r\n   */\r\n  public text(): Promise<string> {\r\n    return this.consumeBody().then((buffer: Buffer) => buffer.toString());\r\n  }\r\n\r\n  /**\r\n   * Decode response as buffer (non-spec api)\r\n   *\r\n   * @return {Promise}\r\n   */\r\n  public buffer(): Promise<Buffer> {\r\n    return this.consumeBody();\r\n  }\r\n\r\n  /**\r\n   * Decode response as text, while automatically detecting the encoding and\r\n   * trying to decode to UTF-8 (non-spec api)\r\n   *\r\n   * @return {Promise}\r\n   */\r\n  public textConverted() {\r\n    return this.consumeBody().then((buffer: Buffer) =>\r\n      convertBody(buffer, this.headers || ({} as Headers))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Decode buffers into utf-8 string\r\n   *\r\n   * @return {Promise}\r\n   */\r\n  private consumeBody(): Promise<Buffer> {\r\n    if (this.disturbed) {\r\n      return Promise.reject(new Error(`body used already for: ${this.url}`));\r\n    }\r\n\r\n    this.disturbed = true;\r\n\r\n    // body is null\r\n    if (this.body === null) {\r\n      return Promise.resolve(Buffer.alloc(0));\r\n    }\r\n\r\n    // body is string\r\n    if (typeof this.body === \"string\") {\r\n      return Promise.resolve(Buffer.from(this.body));\r\n    }\r\n\r\n    // body is blob\r\n    if (this.body instanceof Blob) {\r\n      return Promise.resolve(this.body.buffer);\r\n    }\r\n\r\n    // body is buffer\r\n    if (Buffer.isBuffer(this.body)) {\r\n      return Promise.resolve(this.body);\r\n    }\r\n\r\n    if (!(this.body instanceof Stream)) {\r\n      return Promise.resolve(Buffer.alloc(0));\r\n    }\r\n\r\n    // body is stream\r\n    // get ready to actually consume the body\r\n    const accum: Uint8Array[] = [];\r\n    let accumBytes = 0;\r\n    let abort = false;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      let resTimeout: NodeJS.Timeout;\r\n\r\n      // allow timeout on slow response body\r\n      if (this.timeout) {\r\n        resTimeout = setTimeout(() => {\r\n          abort = true;\r\n          reject(\r\n            new FetchError(\r\n              `Response timeout while trying to fetch ${this.url} (over ${this.timeout}ms)`,\r\n              FetchErrorType.BodyTimeout\r\n            )\r\n          );\r\n          (this.body as Stream).emit(\"cancel-request\");\r\n        }, this.timeout);\r\n      }\r\n\r\n      // handle stream error, such as incorrect content-encoding\r\n      (this.body as Stream).on(\"error\", (err) => {\r\n        reject(\r\n          new FetchError(\r\n            `Invalid response body while trying to fetch ${this.url}: ${err.message}`,\r\n            FetchErrorType.System,\r\n            err\r\n          )\r\n        );\r\n      });\r\n\r\n      (this.body as Stream).on(\"data\", (chunk) => {\r\n        if (abort || chunk === null) {\r\n          return;\r\n        }\r\n\r\n        if (this.size && accumBytes + chunk.length > this.size) {\r\n          abort = true;\r\n          reject(\r\n            new FetchError(\r\n              `content size at ${this.url} over limit: ${this.size}`,\r\n              FetchErrorType.MaxSize\r\n            )\r\n          );\r\n          (this.body as Stream).emit(\"cancel-request\");\r\n          return;\r\n        }\r\n\r\n        accumBytes += chunk.length;\r\n        accum.push(chunk);\r\n      });\r\n\r\n      (this.body as Stream).on(\"end\", () => {\r\n        if (abort) {\r\n          return;\r\n        }\r\n\r\n        clearTimeout(resTimeout);\r\n        resolve(Buffer.concat(accum));\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Detect buffer encoding and convert to target encoding\r\n * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding\r\n *\r\n * @param {Buffer} buffer   Incoming buffer\r\n * @param {Headers} headers\r\n * @return {string}\r\n */\r\nfunction convertBody(buffer: Buffer, headers: Headers) {\r\n  const ct = headers.get(\"content-type\");\r\n  let charset = \"utf-8\";\r\n  let res: string[] | null = null;\r\n\r\n  // header\r\n  if (ct) {\r\n    res = /charset=([^;]*)/i.exec(ct);\r\n  }\r\n\r\n  // no charset in content type, peek at response body for at most 1024 bytes\r\n  const str = buffer.subarray(0, 1024).toString();\r\n\r\n  // html5\r\n  if (!res && str) {\r\n    res = /<meta.+?charset=(['\"])(.+?)\\1/i.exec(str);\r\n  }\r\n\r\n  // html4\r\n  if (!res && str) {\r\n    res =\r\n      /<meta[\\s]+?http-equiv=(['\"])content-type\\1[\\s]+?content=(['\"])(.+?)\\2/i.exec(\r\n        str\r\n      );\r\n\r\n    if (res) {\r\n      const charsetMatch = res.pop();\r\n      res = charsetMatch ? /charset=(.*)/i.exec(charsetMatch) : [];\r\n    }\r\n  }\r\n\r\n  // xml\r\n  if (!res && str) {\r\n    res = /<\\?xml.+?encoding=(['\"])(.+?)\\1/i.exec(str);\r\n  }\r\n\r\n  // found charset\r\n  if (res) {\r\n    charset = res.pop() || \"\";\r\n\r\n    // prevent decode issues when sites use incorrect encoding\r\n    // ref: https://hsivonen.fi/encoding-menu/\r\n    if (charset === \"gb2312\" || charset === \"gbk\") {\r\n      charset = \"gb18030\";\r\n    }\r\n  }\r\n\r\n  // turn raw buffers into a single utf-8 buffer\r\n  return convert(buffer, \"UTF-8\", charset).toString();\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
