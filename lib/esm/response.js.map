{
  "version": 3,
  "sources": ["../../src/response.ts"],
  "sourcesContent": ["/**\r\n * Response class provides content decoding\r\n */\r\nimport { STATUS_CODES } from \"http\";\r\n\r\nimport { BodyInit, ResponseInit } from \"./types.js\";\r\nimport { clone } from \"./common.js\";\r\nimport Headers from \"./headers.js\";\r\nimport Body from \"./body.js\";\r\n\r\n/**\r\n * Response class\r\n *\r\n * @param {Stream} body Readable stream\r\n * @param {Object} opts Response options\r\n */\r\nexport default class Response extends Body {\r\n  readonly status: number;\r\n  readonly statusText: string | undefined;\r\n  readonly headers: Headers;\r\n  private useElectronNet: boolean;\r\n\r\n  constructor(body: BodyInit, init: ResponseInit = {}) {\r\n    super(body as BodyInit | undefined, init);\r\n\r\n    this.url = init.url || \"\";\r\n    this.status = init.status || 200;\r\n    this.statusText = init.statusText || STATUS_CODES[this.status];\r\n    this.headers = new Headers(\r\n      init.headers ? (init.headers as { [key: string]: string }) : {}\r\n    );\r\n    this.useElectronNet = init.useElectronNet || false;\r\n\r\n    Object.defineProperty(this, Symbol.toStringTag, {\r\n      value: \"Response\",\r\n      writable: false,\r\n      enumerable: false,\r\n      configurable: true,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Convenience property representing if the request ended normally\r\n   */\r\n  public get ok() {\r\n    return this.status >= 200 && this.status < 300;\r\n  }\r\n\r\n  /**\r\n   * Clone this response\r\n   *\r\n   * @return {Response}\r\n   */\r\n  public clone() {\r\n    return new Response(clone(this), {\r\n      url: this.url,\r\n      status: this.status,\r\n      statusText: this.statusText,\r\n      headers: this.headers,\r\n      ok: this.ok,\r\n      useElectronNet: this.useElectronNet,\r\n    });\r\n  }\r\n}\r\n\r\nObject.defineProperty(Response.prototype, Symbol.toStringTag, {\r\n  value: \"ResponsePrototype\",\r\n  writable: false,\r\n  enumerable: false,\r\n  configurable: true,\r\n});\r\n"],
  "mappings": "AAGA,SAAS,oBAAoB;AAG7B,SAAS,aAAa;AACtB,OAAO,aAAa;AACpB,OAAO,UAAU;AAQjB,MAAO,iBAA+B,KAAK;AAAA,EAChC;AAAA,EACA;AAAA,EACA;AAAA,EACD;AAAA,EAER,YAAY,MAAgB,OAAqB,CAAC,GAAG;AACnD,UAAM,MAA8B,IAAI;AAExC,SAAK,MAAM,KAAK,OAAO;AACvB,SAAK,SAAS,KAAK,UAAU;AAC7B,SAAK,aAAa,KAAK,cAAc,aAAa,KAAK,MAAM;AAC7D,SAAK,UAAU,IAAI;AAAA,MACjB,KAAK,UAAW,KAAK,UAAwC,CAAC;AAAA,IAChE;AACA,SAAK,iBAAiB,KAAK,kBAAkB;AAE7C,WAAO,eAAe,MAAM,OAAO,aAAa;AAAA,MAC9C,OAAO;AAAA,MACP,UAAU;AAAA,MACV,YAAY;AAAA,MACZ,cAAc;AAAA,IAChB,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,KAAK;AACd,WAAO,KAAK,UAAU,OAAO,KAAK,SAAS;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,QAAQ;AACb,WAAO,IAAI,SAAS,MAAM,IAAI,GAAG;AAAA,MAC/B,KAAK,KAAK;AAAA,MACV,QAAQ,KAAK;AAAA,MACb,YAAY,KAAK;AAAA,MACjB,SAAS,KAAK;AAAA,MACd,IAAI,KAAK;AAAA,MACT,gBAAgB,KAAK;AAAA,IACvB,CAAC;AAAA,EACH;AACF;AAEA,OAAO,eAAe,SAAS,WAAW,OAAO,aAAa;AAAA,EAC5D,OAAO;AAAA,EACP,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,cAAc;AAChB,CAAC;",
  "names": []
}
