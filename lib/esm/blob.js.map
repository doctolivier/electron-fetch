{
  "version": 3,
  "sources": ["../../src/blob.ts"],
  "sourcesContent": ["import { BlobOptions } from \"node:buffer\";\r\nimport { BinaryLike } from \"node:crypto\";\r\n\r\nexport default class Blob {\r\n  public buffer: Buffer;\r\n  readonly type: string;\r\n  private closed: boolean;\r\n\r\n  constructor(\r\n    sources: Array<ArrayBuffer | BinaryLike | Blob> = [],\r\n    options?: BlobOptions\r\n  ) {\r\n    Object.defineProperty(this, Symbol.toStringTag, {\r\n      value: \"Blob\",\r\n      writable: false,\r\n      enumerable: false,\r\n      configurable: true,\r\n    });\r\n\r\n    this.closed = false;\r\n    this.type = \"\";\r\n\r\n    const buffers: Buffer[] = sources.map((source) => {\r\n      if (Buffer.isBuffer(source)) {\r\n        return source;\r\n      } else if (ArrayBuffer.isView(source)) {\r\n        return Buffer.from(source.buffer, source.byteOffset, source.byteLength);\r\n      } else if (source instanceof ArrayBuffer) {\r\n        return Buffer.from(source);\r\n      } else if (source instanceof Blob) {\r\n        return source.buffer;\r\n      } else {\r\n        return Buffer.from(String(source));\r\n      }\r\n    });\r\n\r\n    this.buffer = Buffer.concat(buffers);\r\n\r\n    const type =\r\n      options &&\r\n      options.type !== undefined &&\r\n      String(options.type).toLowerCase();\r\n    if (type && !/[^\\u0020-\\u007E]/.test(type)) {\r\n      this.type = type;\r\n    }\r\n  }\r\n\r\n  get size() {\r\n    return this.closed ? 0 : this.buffer.length;\r\n  }\r\n\r\n  get isClosed() {\r\n    return this.closed;\r\n  }\r\n\r\n  set isClosed(value: boolean) {\r\n    this.closed = value;\r\n  }\r\n\r\n  slice(start: number = 0, end: number = this.size, type?: string): Blob {\r\n    const size = this.size;\r\n\r\n    const relativeStart =\r\n      start < 0 ? Math.max(size + start, 0) : Math.min(start, size);\r\n    const relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size);\r\n    const span = Math.max(relativeEnd - relativeStart, 0);\r\n\r\n    const slicedBuffer = this.buffer.subarray(\r\n      relativeStart,\r\n      relativeStart + span\r\n    );\r\n    const blob = new Blob([], { type });\r\n    blob.buffer = slicedBuffer;\r\n    blob.isClosed = this.closed;\r\n    return blob;\r\n  }\r\n\r\n  close() {\r\n    this.closed = true;\r\n  }\r\n}\r\n\r\nObject.defineProperty(Blob.prototype, Symbol.toStringTag, {\r\n  value: \"BlobPrototype\",\r\n  writable: false,\r\n  enumerable: false,\r\n  configurable: true,\r\n});\r\n"],
  "mappings": "AAGA,MAAO,KAAmB;AAAA,EACjB;AAAA,EACE;AAAA,EACD;AAAA,EAER,YACE,UAAkD,CAAC,GACnD,SACA;AACA,WAAO,eAAe,MAAM,OAAO,aAAa;AAAA,MAC9C,OAAO;AAAA,MACP,UAAU;AAAA,MACV,YAAY;AAAA,MACZ,cAAc;AAAA,IAChB,CAAC;AAED,SAAK,SAAS;AACd,SAAK,OAAO;AAEZ,UAAM,UAAoB,QAAQ,IAAI,CAAC,WAAW;AAChD,UAAI,OAAO,SAAS,MAAM,GAAG;AAC3B,eAAO;AAAA,MACT,WAAW,YAAY,OAAO,MAAM,GAAG;AACrC,eAAO,OAAO,KAAK,OAAO,QAAQ,OAAO,YAAY,OAAO,UAAU;AAAA,MACxE,WAAW,kBAAkB,aAAa;AACxC,eAAO,OAAO,KAAK,MAAM;AAAA,MAC3B,WAAW,kBAAkB,MAAM;AACjC,eAAO,OAAO;AAAA,MAChB,OAAO;AACL,eAAO,OAAO,KAAK,OAAO,MAAM,CAAC;AAAA,MACnC;AAAA,IACF,CAAC;AAED,SAAK,SAAS,OAAO,OAAO,OAAO;AAEnC,UAAM,OACJ,WACA,QAAQ,SAAS,UACjB,OAAO,QAAQ,IAAI,EAAE,YAAY;AACnC,QAAI,QAAQ,CAAC,mBAAmB,KAAK,IAAI,GAAG;AAC1C,WAAK,OAAO;AAAA,IACd;AAAA,EACF;AAAA,EAEA,IAAI,OAAO;AACT,WAAO,KAAK,SAAS,IAAI,KAAK,OAAO;AAAA,EACvC;AAAA,EAEA,IAAI,WAAW;AACb,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,SAAS,OAAgB;AAC3B,SAAK,SAAS;AAAA,EAChB;AAAA,EAEA,MAAM,QAAgB,GAAG,MAAc,KAAK,MAAM,MAAqB;AACrE,UAAM,OAAO,KAAK;AAElB,UAAM,gBACJ,QAAQ,IAAI,KAAK,IAAI,OAAO,OAAO,CAAC,IAAI,KAAK,IAAI,OAAO,IAAI;AAC9D,UAAM,cAAc,MAAM,IAAI,KAAK,IAAI,OAAO,KAAK,CAAC,IAAI,KAAK,IAAI,KAAK,IAAI;AAC1E,UAAM,OAAO,KAAK,IAAI,cAAc,eAAe,CAAC;AAEpD,UAAM,eAAe,KAAK,OAAO;AAAA,MAC/B;AAAA,MACA,gBAAgB;AAAA,IAClB;AACA,UAAM,OAAO,IAAI,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC;AAClC,SAAK,SAAS;AACd,SAAK,WAAW,KAAK;AACrB,WAAO;AAAA,EACT;AAAA,EAEA,QAAQ;AACN,SAAK,SAAS;AAAA,EAChB;AACF;AAEA,OAAO,eAAe,KAAK,WAAW,OAAO,aAAa;AAAA,EACxD,OAAO;AAAA,EACP,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,cAAc;AAChB,CAAC;",
  "names": []
}
